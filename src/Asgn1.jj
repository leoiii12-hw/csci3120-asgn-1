options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  package miniJava;

  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


/**
 *
 * Specification of a lexical analysis starts here.
 *
 */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

// IN_MULTI_LINE_COMMENT and IN_SIGNLE_LINE_COMMENT are adopted from http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#tth_sEc3.14
MORE : { "/*": IN_MULTI_LINE_COMMENT }
< IN_MULTI_LINE_COMMENT > MORE : { <  ~[] > }
< IN_MULTI_LINE_COMMENT > SKIP : { "*/": DEFAULT }

MORE : { "//": IN_SINGLE_LINE_COMMENT }
< IN_SINGLE_LINE_COMMENT > SPECIAL_TOKEN : { < SINGLE_LINE_COMMENT: "\n"|"\r"|"\r\n" > : DEFAULT }
< IN_SINGLE_LINE_COMMENT > MORE : { < ~[] > }

// KEYWORDS
TOKEN :
{
  < CLASS: "class" >
| < LBRACE: "{" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < LPAREN: "(" >
| < STRING: "String" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < RPAREN: ")" >
| < RBRACE: "}" >
| < EXTENDS: "extends" >
| < SEMICOLON: ";" >
| < RETURN: "return" >
| < COMMA: "," >
| < INTEGER: "int" >
| < BOOLEAN: "boolean" >
| < ASSIGN: "=" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < PRINT: "System.out.println" >
| < AND : "&&" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DOT: "." >
| < LENGTH: "length" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < NEW: "new" >
| < NOT : "!" >
}

// INTEGER, from javacc/javacc-5.0/examples/Transformer/ToyJava.jjt
TOKEN :
{
  < INTEGER_LITERAL:
      <DECIMAL_LITERAL> (["l","L"])?
    | <HEX_LITERAL> (["l","L"])?
    | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

// IDENTIFIER
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN :
{
  < UNMATCHED_END_OF_COMMENT: "*/">
| < INVALID: ~[] >
}

/**
 *
 * Specification of a lexical analysis ends here.
 *
 */